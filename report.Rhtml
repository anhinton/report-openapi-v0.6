<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>OpenAPI version 0.6</title>
    <meta name="author" content="Ashley Noel Hinton, Paul Murrell">
    <meta name="description" content="Technical report on version 0.6 of the OpenAPI architecture">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="stylesheet.css">
  </head>
  
  <body>
    <!--begin.rcode setup, echo=FALSE, message=FALSE
	library(knitr)
	opts_chunk$set(cache=TRUE, tidy = TRUE)
	library(conduit)
	end.rcode-->
    
    <div class="title">
      <h1>OpenAPI version 0.6</h1>
      <div class="author">
	<p>Ashley Noel Hinton<br>
	  <span class="author-email"><a href="mailto:ahin017@aucklanduni.ac.nz">ahin017@aucklanduni.ac.nz</a></span>
	</p>
	<p>Paul Murrell<br>
	  <span class="author-email"><a href="mailto:paul@stat.auckland.ac.nz">paul@stat.auckland.ac.nz</a></span>
	</p>
	<p class="affiliation">Department of Statistics, The University of
	  Auckland</p>
      </div>
      <p class="date">June 2016</p>
    </div>

    <div id="introduction">
      <p>The OpenAPI architecture specifies a method for sharing and
	combining pieces of data analysis code so as to help people
	connect with data. OpenAPI describes how pieces of data
	analysis code can be wrapped in modules, and how these modules
	can be combined in pipelines which describe a whole data
	analysis workflow.  Modules and pipelines are created using
	simple XML, and are intended to promote sharing and
	re-use. Modules and pipelines can be executed in OpenAPI glue
	system software
	(<a href="http://stattech.wordpress.fos.auckland.ac.nz/2015-01-introducing-openapi/">Introducing OpenAPI</a>,
	<a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-01-openapi-version-0-3/">OpenAPI version 0.3</a>,
	<a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-07-openapi-version-0-5/">OpenAPI version 0.5</a>).
      </p>

      <p>This report describes the changes to the OpenAPI architecture
	in version 0.6. Module host elements were implemented in
	OpenAPI version 0.5; version 0.6 has extended module hosts so
	it is possible to provide a module's host information through
	a module input. The way a module author specifies a module's
	language has also been changed in version 0.6, with the
	introduction of the <code>language</code> element. This
	element also allows the author to specify details of the
	version of the language required.</p>

      <p>The changes described in this report have been implemented in
	<a href="https://github.com/anhinton/conduit/releases/tag/v0.6">
	Conduit version 0.6</a>. Conduit is a protoype OpenAPI glue
	system implemented as an R package. Further etails of changes
	to Conduit v0.6 are provided at the end of this report.</p>
    </div>

    <h2>Passing module host information through a module input</h2>

    <p>Module host elements were introduced in OpenAPI v0.5 to provide
      a method for meeting module source script dependencies
      (<a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-07-openapi-version-0-5/">OpenAPI version 0.5</a>).
      One of the limitations of using the <code>docker</code>
      or <code>vagrant</code> host elements described in OpenAPI v0.5
      was that a module author was assuming the host machine described
      had been created and was available for use when a module is
      executed. Module host elements were static, meaning module
      authors had no way of creating a custom host machine as part of
      an OpenAPI pipeline. Anyone wishing to run a module which
      required a host machine was also responsible for ensuring this
      host machine was ready to be accessed.</p>

    <p>OpenAPI version 0.6 introduces
      the <code>moduleInput</code> element to the list of elements
      available inside a module <code>host</code>
      element. Unlike <code>docker</code> or <code>vagrant</code> host
      elements, the <code>moduleHost</code> element indicates that the
      module's host is to be provided in one of the module's
      <code>input</code> elements. This allows a module author to
      create a module host machine and reference it in the output of a
      module. A pipeline can then pass this output to a module waiting
      for its host to be provided by one of its inputs.</p>

    <p>The following code shows how a module author can specify a
      module input as the source of the host machine details:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/">
  &lt;language>R&lt;/language>
  &lt;host>
    &lt;moduleInput name="hostMachine"/>
  &lt;/host>
  &lt;input name="hostMachine">
    &lt;file ref="hostMachine.xml"/>
    &lt;format formatType="text">XML file&lt;/format>
  &lt;/input>
&lt;/module></code></pre>

    <p>The <code>moduleInput</code> element contains a
      <code>name</code> attribute, which the module author uses to
      name the input which will provide the host machine XML. In the above
      code the &ldquo;hostMachine&rdquo; input is named&mdash;note the
      <code>moduleInput</code> <code>name</code> attribute must match
      exactly the name of one of the module's <code>input</code>
      names. When this module, is executed the glue system reads the
      details of the host machine described in
      &ldquo;hostMachine.xml&rdquo; and executes the module on this
      host machine. This XML document should contain only XML to
      describe a <code>docker</code> or
      <code>vagrant</code> host machine as introduced in OpenAPI
      v0.5.</p>

    <p>The simpleInputHost pipeline example demonstrates how a module
      host can be passed into a module as an input. The pipeline
      contains two modules&mdash;&lsquo;createVagrant&rsquo; and
      &lsquo;normalList&rsquo;. A pipe connects the output
      &lsquo;vagrantMachine.xml&rsquo; to an input of the same name in
      &lsquo;normalList&rsquo;. The XML code for
      <a href="examples/simpleInputHost/pipeline.xml">simpleInputHost/pipeline.xml</a>
      follows:</p>
    
    <!--begin.rcode simpleInputHost_pipeline_xml, echo = FALSE, comment = NA
	cat(readLines("examples/simpleInputHost/pipeline.xml"), sep = "\n")
	end.rcode-->

    <p>The &lsquo;createVagrant&rsquo; module wraps a bash script,
      which creates a Vagrantfile on the local machine, and starts the
      vagrant machine. The script creates an XML file,
      &lsquo;vagrantMachine.xml&rsquo;, containing
      OpenAPI <code>docker</code> host XML. The module returns the
      &lsquo;vagrantMachine.xml&rsquo; as an <code>output</code>. The
      XML code for
      <a href="examples/simpleInputHost/createVagrant.xml">createVagrant.xml</a>
      follows:</p>

    <!--begin.rcode createVagrant_xml, echo = FALSE, comment = NA
	cat(readLines("examples/simpleInputHost/createVagrant.xml"), sep = "\n")
	end.rcode-->

    <p>The &lsquo;normalList&rsquo; module wraps a
    &ldquo;python2&rdquo; script. The module has
    a <code>moduleInput</code> <code>host</code>, which names the
    input &lsquo;vagrantMachine.xml&rsquo;. The module has
    one <code>input</code>, &lsquo;vagrantMachine.xml&rsquo;. The
    script will be executed on the host machine passed in by this
    input. The scritpt produces a list of random numbers, which is
    returned as <code>output</code> &lsquo;x&rsquo;. The XML code for
    <a href="examples/simpleInputHost/normalList.xml">normalList.xml</a>
    follows:</p>

    <!--begin.rcode normalList_xml, echo = FALSE, comment = NA
	cat(readLines("examples/simpleInputHost/normalList.xml"), sep = "\n")
	end.rcode-->

    <p>When this pipeline is executed in an OpenAPI glue system the
    glue system will execute the &lsquo;normalList&rsquo; on the host
    machine created by &lsquo;createVagrant&rsquo;, even if this
    machine did not exist when the pipeline was loaded. This pipeline
    can be executed in Conduit on a machine with Vagrant installed
    with the following code. Please note that executing the
    &lsquo;createVagrant&rsquo; module will create and start a new
    vagrant machine in the directory
    &lsquo;<code>~/vagrant/precise32</code>&rsquo; on the machine
    running Conduit. If this directory does not exist it will be
    created. If the &lsquo;hashicorp/precise32&rsquo; Vagrant box has
    not been downloaded to your machine it will be downloaded
    first. The vagrant machine will not be halted by this pipeline,
    and should be halted manually from
    &lsquo;<code>~/vagrant/precise32</code>&rsquo;.</p>

    <!--begin.rcode simpleInputHost, cache.rebuild = FALSE
	simpleInputHost <- loadPipeline(
	name = "simpleInputHost",
	ref = file.path("examples", "simpleInputHost", "pipeline.xml"))

	result1 <- runPipeline(pipeline = simpleInputHost)
	result1Tarball <- export(result1)
	end.rcode-->

    <p>The result of running &lsquo;simpleInputHost&rsquo; can be found
    at <a href="simpleInputHost.tar.gz">simpleInputHost.tar.gz</a>.</p>

    <h2>Specifying module language version details</h2>

    <p>In OpenAPI v0.3 the <code>language</code> attribute was added
      to <code>module</code> elements with which a module author
      specified the language of execution for a module's source
      scripts
      (<a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-01-openapi-version-0-3/">OpenAPI
      version 0.3</a>).  In OpenAPI v0.6 this attribute has been
      replaced with a <code>language</code> element. OpenAPI v0.6 also
      introduces attributes to the <code>language</code> element for
      specifying the language version required to execute a module's
      source scripts.</p>

    <p>Each OpenAPI <code>module</code> must contain
      a <code>language</code> element as its first element. The value of the
      <code>language</code> element should be the language with which
      an OpenAPI glue system will execute the module's source
      scripts. The following code demonstrates how a module author
      indicates a module should be executed using the
      &ldquo;python&rdquo; language:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language&gt;python&lt;/language&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>A module author can now also specify the minimum and maximum
    version of the language required using either or both the
    <code>minVersion</code> and the <code>maxVersion</code>
    attributes. These attributes should be provided with a version
    number string appropriate to the language named. The following
    code demonstrates how a module author can specify that a version of the
    &ldquo;R&rdquo; language between versions &ldquo;2.14.1&rdquo; and
    &ldquo;3.0.2&rdquo; should be used:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language minVersion="2.14.1" maxVersion="3.0.2"&gt;R&lt;/language&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>If a module author instead requires an exact version of a
    language for script exection she can specify this using the new
    <code>version</code> attribute of the <code>language</code>
    element. The <code>version</code> attribute should be provided
    with a version number string appropriate to the language
    named. The following code demonstrates how a module author can
    specify that version &ldquo;3.5.1+&rdquo; of the
    &ldquo;python&rdquo; language should be used:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language version="3.5.1+"&gt;python&lt;/language&gt;
  ...
&lt;/module&gt;</code></pre>

    <h3>Supporting language versions in OpenAPI glue systems</h3>

    <p>While OpenAPI version 0.6 has introduced the ability to specify
    the version of a language used to execute a module's source
    scripts, it is not a requirement of OpenAPI v0.6 that a glue
    system must respect such specifications. Rather it is intended
    that module language version information provide a glue system
    user with a means for debugging problematic module execution. For
    example, a glue system may provide an option to warn a module user
    when version requirements are not met. Language version attributes
    may also serve as a means for recording the actual version of a
    language used when creating module and pipeline result
    objects. This could provide useful information about how certain
    module and pipeline results were achieved, which could aid in the
    reproducibility of a module or pipeline.</p>

    <p>The next section includes a description of how Conduit version
    0.6 has implemented module language version information.</p>
    
    <h2>Changes in Conduit version 0.6</h2>

    <p>Conduit is a prototype OpenAPI glue system implemented as an R
    package.  <a
    href="https://github.com/anhinton/conduit/releases/tag/v0.6">Conduit
    version 0.6</a> implements the changes to OpenAPI v0.6 described
    in this report. This section describes how <code>module</code>
    <code>language</code> elements have been implemented in Conduit
    v0.6 to optionally provide a warning to the user when the language
    used to execute a module does not meet the author's
    requirements. Conduit will also record the exact version of a
    language used for module execution in its persistent module
    results. Finally, language version information has been used to
    determine which of the two commonly installed version of the
    &ldquo;python&rdquo; language is to be used for module
    execuction.</p>

    <h3>Warning about language version violation</h3>

    <p>In Conduit version 0.6 a new argument, <code>warnVersion</code>
    has been added to the <code>runModule()</code> function, used to
    execute a module. When this argument is passed the default value
    of <code>FALSE</code> the module will not behave any differently
    than in previouse versions. However, when <code>warnVersion</code>
    is set to <code>FALSE</code> Conduit will give a warning if any of
    a module's language version attributes are violated.</p>

    <p>The &lsquo;listOfThings&rsquo; module specifies that it is to
    be executed using version &ldquo;2.14.1&rdquo; of the
    &ldquo;R&rdquo; language. The XML code
    for <a href="examples/warnVersion/listOfThings.xml">listOfThings.xml</a>
    follows:</p>

    <!--begin.rcodelistOfThings_module, echo = FALSE, comment = NA
	cat(readLines(file.path("examples",
        "warnVersion",
        "listOfThings.xml")), sep = "\n")
	end.rcode-->

    <p>If this module is executed in a version of R other than 2.14.1
      Conduit will give a warning. The following demonstrates the
      &lsquo;listOfThings&rsquo; module being executed in an R version
      other than 2.14.1:</p>

    <!--begin.rcode warnVersionTrue
	listOfThings <- loadModule(
	name = "listOfThings",
	ref = file.path("examples", "warnVersion", "listOfThings.xml"))
	result2 <- runModule(module = listOfThings, targetDirectory = tempdir(),
        warnVersion = TRUE)
	result2tarball <- export(result2)
	end.rcode-->

    <p>The result of running &lsquo;listOfThings&rsquo; can be found
    at <a href="listOfThings.tar.gz">listOfThings.tar.gz</a>.</p>

    <h3>Recording language version used for execution</h3>

    <p>Persistent result formats for modules were introduced
    in <a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-07-openapi-version-0-5/">OpenAPI
    version 0.5</a>. In Conduit v0.6 the exact version of the language
    used to execute a module's source scripts is stored in the module
    result created. Information on the language used to execute the
    &lsquo;listOfThings&rsquo; example above can be seen with the
    following R code:</p>

    <!--begin.rcode execLanguageVersion
	cat(paste0("Language: '", result2$component$language$language, "'"),
	paste0("Version: '", result2$component$language$version, "'"), sep = "\n")
	end.rcode-->

    <h3>Using language version to choose major Python version</h3>

    <p>There are currently two major versions of Python in common use,
    Python versions 2.7.11 and 3.5.1 being the most recent stable
    releases. The Python Software Foundation says &ldquo;Python 3.x is
    the present and future of the language&rdquo;
    (<a href="https://wiki.python.org/moin/Python2orPython3">Should I
    use Python 2 or Python 3 for my development
    activity?</a>). However, many common software libraries only
    support Python 2, and the 2.7 release of Python will receive
    security and bug fixes from the core development team until 2020
    (<a href="https://www.python.org/dev/peps/pep-0373/">PEP 373 --
    Python 2.7 Release Schedule</a>).</p>

    <p>Previous versions of Conduit used the system
    command <code>/usr/bin/python</code> to execute the source scripts
    of &ldquo;python&rdquo;-language modules. On many Linux systems
    this meant that Python v2.x would be used. From version 0.6
    Conduit will try to execute any module which specifies
    &ldquo;python&rdquo; as its language using Python v3.x via the
    system command <code>/usr/bin/python3</code>. Versions 2.x and 3.x
    of Python can be invoked by providing &ldquo;python2&rdquo; and
    &ldquo;python3&rdquo; respectiveyl as a module's language.</p>

    <p>In Conduit v0.6 the following two module XML examples will be
      executed using Python v3.x:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language&gt;python&lt;/language&gt;
  ...
&lt;/module&gt;</code></pre>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language&gt;python3&lt;/language&gt;
  ...
&lt;/module&gt;</pre></code>

    <p>If a module author wishes to execute a module's source scripts
    using Python v2.x she can specify the &ldquo;python2&rdquo;
    language as in the following module XML:</p>
    
    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language&gt;python2&lt;/language&gt;
  ...
&lt;/module&gt;</pre></code>

    <p>The introduction of module language version attributes allows
    another mechanism for controlling the version of Python used to
    executed module source scripts. If a module author specifies that
    a module's scripts should be executed using the
    &ldquo;python&rdquo; language with a <code>maxVersion</code> less
    than version &ldquo;3.0.0&rdquo; Conduit v0.6 will execute these
    scripts as if the author has specified &ldquo;python2&rdquo; as
    the module language. The following module XML will be executed
    using Python v2.x in Conduit v0.6:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language maxVersion="2.8"&gt;python&lt;/language&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>Similarly, if a module author specifies a module requires an
    exact version of &ldquo;python&rdquo; less then version
    &ldquo;3.0.0&rdquo; using the <code>version</code> attribute
    Conduit v0.6 will execute this module's scripts as if
    &ldquo;python2&rdquo; had been specified. This will occur even if
    the version of Python v2.x used by Conduit does not
    match <code>version</code> exactly. The following module XML will
    be executed using Python v2.x in Conduit v0.6:</p>

    <pre><code>&lt;module xmlns="http://www.openapi.org/2014/"&gt;
  &lt;language version="2.7.11+"&gt;python&lt;/language&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>While Conduit v0.6 will select a Python version for execution
    in the way described above, it necessarily depends on there being
    Python executables at <code>/usr/bin/python2</code>
    and <code>/usr/bin/python3</code>. Most Linux distributions
    provide a method to install Python version 2.x and 3.x from their
    software repositories, and mayne install one of both by
    default.</p>
    
  </body>
</html>
